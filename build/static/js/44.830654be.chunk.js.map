{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow.tsx","routes/safe/components/Balances/SendModal/screens/SendFunds/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/index.tsx","routes/safe/components/Balances/SendModal/utils.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/forms/SelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/index.tsx"],"names":["SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","SpendingLimitRow","tokenSpendingLimit","selectedToken","availableAmount","useMemo","fromTokenUnit","BigNumber","amount","minus","spent","toString","decimals","mutators","useForm","Row","margin","Col","between","style","flexDirection","size","Field","name","initialValue","input","value","onRadioChange","setTxType","options","label","symbol","styles","createStyles","manage","fontSize","lg","qrCodeBtn","cursor","formContainer","padding","md","minHeight","buttonRow","height","justifyContent","gap","selectAddress","formMutators","setMax","args","state","utils","changeValue","onTokenChange","formState","values","setRecipient","useStyles","makeStyles","InputAdornmentChildSymbol","SendFunds","initialValues","onClose","onReview","recipientAddress","classes","tokens","useSelector","extendedSafeTokensSelector","addressBook","currentNetworkAddressBook","nativeCurrency","getNativeCurrency","useState","defaultEntry","address","predefinedAddress","addressBookEntry","find","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","addressErrorMsg","setAddressErrorMsg","useEffect","spendingLimits","currentSafeSpendingLimits","currentUser","userAccountSelector","ModalHeader","subTitle","getStepTitle","title","Hairline","GnoForm","token","onSubmit","submitValues","recipientName","validation","tokenAddress","txType","tokenValidation","composeValidators","required","isSpendingLimitTx","isSpendingLimit","tokenDecimals","Number","getBalanceAndDecimalsFromToken","mustBeFloat","minMaxDecimalsLength","minValue","maxValue","spendingLimitAllowedBalance","balance","userSpendingLimits","filter","delegate","getSpendingLimitByTokenAddress","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","addressErrorMessage","mustBeEthereumAddress","shouldDisableSubmitButton","setMaxAllowedAmount","maxAmount","tokenBalance","spendingLimitBalance","gt","Block","className","SafeInfo","text","Divider","withArrow","onKeyDown","e","sameString","key","onClick","role","tabIndex","Paragraph","color","noMargin","align","PrefixedEthHashInfo","hash","strongName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","xs","AddressBookInput","fieldMutator","errorMsg","center","middle","ScanQRWrapper","TokenSelectField","isValid","ButtonLink","weight","testId","component","TextField","inputAdornment","endAdornment","InputAdornment","position","placeholder","type","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","disabled","valid","currentStep","totalSteps","heading","maxHeight","boxSizing","loaderContainer","width","close","secondaryText","detailsContainer","backgroundColor","background","button","marginLeft","sm","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","error","setError","cameraBlocked","setCameraBlocked","scannerRef","React","openImageDialog","current","onFileScannedResolve","successData","console","description","handleClose","open","grow","IconButton","disableRipple","layout","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","qrModalOpen","setQrModalOpen","Img","alt","src","QRIcon","Wrapper","div","StyledDivider","DividerSRC","StyledIcon","Icon","StyledBlock","border","currentSafeWithNames","safeAddress","ethBalance","safeName","SelectInput","disableError","formControlProps","onChange","restInput","meta","renderValue","rest","showError","submitError","dirtySinceLastSubmit","touched","inputProps","htmlFor","useTextFieldLabelStyle","root","overflow","useTextFieldInputStyle","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","networkId","currentChainId","updateAddressInfo","addressEntry","validateAddress","fullAddress","parsePrefixedAddress","checkedAddr","checksumAddress","filteredEntries","filterAddressEntries","inputValue","length","onInputChange","_","reason","a","normalizedValue","trimSpaces","hasFeature","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","chainId","labelStyles","inputStyles","Autocomplete","closeIcon","openOnFocus","filterOptions","freeSolo","id","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","InputProps","getOptionLabel","renderOption","display","flexGrow","props","ContractsAddressBookInput","setFilteredEntries","filterContractAddresses","filterContractAddressBookEntries","filteredADBK","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","useSelectedTokenStyles","container","tokenData","lineHeight","tokenImage","marginRight","useSelectStyles","selectMenu","paddingRight","SelectedToken","MenuItem","ListItemIcon","setImageToPlaceholder","logoUri","ListItemText","secondary","formatAmount","tokenClasses","SelectField","displayEmpty","validate","map"],"mappings":"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","file":"static/js/44.830654be.chunk.js","sourcesContent":["import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\nimport { BigNumber } from 'bignumber.js'\nimport { ReactElement, useMemo } from 'react'\nimport { useForm } from 'react-final-form'\nimport styled from 'styled-components'\n\nimport Field from 'src/components/forms/Field'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\n\n// TODO: propose refactor in safe-react-components based on this requirements\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\n  & .MuiRadio-colorPrimary.Mui-checked {\n    color: ${({ theme }) => theme.colors.primary};\n  }\n`\n\ninterface SpendingLimitRowProps {\n  tokenSpendingLimit: SpendingLimit\n  selectedToken: Token\n}\n\nexport const SpendingLimitRow = ({ tokenSpendingLimit, selectedToken }: SpendingLimitRowProps): ReactElement => {\n  const availableAmount = useMemo(() => {\n    return fromTokenUnit(\n      new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\n      selectedToken.decimals,\n    )\n  }, [selectedToken.decimals, tokenSpendingLimit.amount, tokenSpendingLimit.spent])\n  const { mutators } = useForm()\n\n  return (\n    <Row margin=\"sm\">\n      <Col between=\"lg\" style={{ flexDirection: 'column' }}>\n        <Text size=\"lg\">Send as</Text>\n        <Field name=\"txType\" initialValue=\"multiSig\">\n          {({ input: { name, value } }) => (\n            <SpendingLimitRadioButtons\n              name={name}\n              value={value || 'multiSig'}\n              onRadioChange={mutators.setTxType}\n              options={[\n                { label: 'Multisig transaction', value: 'multiSig' },\n                {\n                  label: `Spending limit transaction (${availableAmount} ${selectedToken.symbol})`,\n                  value: 'spendingLimit',\n                },\n              ]}\n            />\n          )}\n        </Field>\n      </Col>\n    </Row>\n  )\n}\n","import { lg, md } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  manage: {\n    fontSize: lg,\n  },\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n    minHeight: '216px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n})\n","import InputAdornment from '@material-ui/core/InputAdornment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { BigNumber } from 'bignumber.js'\nimport { ReactElement, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport TextField from 'src/components/forms/TextField'\nimport {\n  composeValidators,\n  maxValue,\n  minValue,\n  minMaxDecimalsLength,\n  mustBeFloat,\n  mustBeEthereumAddress,\n  required,\n} from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport ButtonLink from 'src/components/layout/ButtonLink'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\n\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport { SpendingLimitRow } from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow'\nimport TokenSelectField from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { currentSafeSpendingLimits } from 'src/logic/safe/store/selectors'\nimport { sameString } from 'src/utils/strings'\n\nimport { styles } from './style'\nimport { spendingLimitAllowedBalance, getSpendingLimitByTokenAddress } from 'src/logic/safe/utils/spendingLimits'\nimport { getBalanceAndDecimalsFromToken } from 'src/logic/tokens/utils/tokenHelpers'\nimport Divider from 'src/components/Divider'\nimport { Modal } from 'src/components/Modal'\nimport { ModalHeader } from '../ModalHeader'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport { getStepTitle } from 'src/routes/safe/components/Balances/SendModal/utils'\n\nconst formMutators = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => args[0])\n  },\n  onTokenChange: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => state.formState.values.amount)\n  },\n  setRecipient: (args, state, utils) => {\n    utils.changeValue(state, 'recipientAddress', () => args[0])\n  },\n  setTxType: (args, state, utils) => {\n    utils.changeValue(state, 'txType', () => args[0])\n  },\n}\n\nconst useStyles = makeStyles(styles)\n\nexport type SendFundsTx = {\n  amount?: string\n  recipientAddress?: string\n  name?: string\n  token?: string\n  txType?: string\n  tokenSpendingLimit?: SpendingLimit\n}\n\ntype SendFundsProps = {\n  initialValues: SendFundsTx\n  onClose: () => void\n  onReview: (txInfo: unknown) => void\n  recipientAddress?: string\n  selectedToken?: string\n  amount?: string\n}\n\nconst InputAdornmentChildSymbol = ({ symbol }: { symbol?: string }): ReactElement => {\n  return <>{symbol}</>\n}\n\nconst SendFunds = ({\n  initialValues,\n  onClose,\n  onReview,\n  recipientAddress,\n  selectedToken = '',\n  amount,\n}: SendFundsProps): ReactElement => {\n  const classes = useStyles()\n  const tokens = useSelector(extendedSafeTokensSelector)\n  const addressBook = useSelector(currentNetworkAddressBook)\n  const nativeCurrency = getNativeCurrency()\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\n    const defaultEntry = { address: recipientAddress || '', name: '' }\n\n    // if there's nothing to lookup for, we return the default entry\n    if (!initialValues?.recipientAddress && !recipientAddress) {\n      return defaultEntry\n    }\n\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\n    const addressBookEntry = addressBook.find(({ address }) => {\n      return sameAddress(predefinedAddress, address)\n    })\n\n    // if found in the Address Book, then we return the entry\n    if (addressBookEntry) {\n      return addressBookEntry\n    }\n\n    // otherwise we return the default entry\n    return defaultEntry\n  })\n  const [pristine, setPristine] = useState(true)\n  const [isValidAddress, setIsValidAddress] = useState(false)\n  const [addressErrorMsg, setAddressErrorMsg] = useState('')\n\n  useEffect(() => {\n    if (selectedEntry === null && pristine) {\n      setPristine(false)\n    }\n  }, [selectedEntry, pristine])\n\n  let tokenSpendingLimit\n  const handleSubmit = (values) => {\n    const submitValues = { ...values }\n    // If the input wasn't modified, there was no mutation of the recipientAddress\n    if (!values.recipientAddress) {\n      submitValues.recipientAddress = selectedEntry?.address\n    }\n    submitValues.recipientName = selectedEntry?.name\n    onReview({ ...submitValues, tokenSpendingLimit })\n  }\n\n  const spendingLimits = useSelector(currentSafeSpendingLimits)\n  const currentUser = useSelector(userAccountSelector)\n\n  const sendFundsValidation = (values: { amount?: string; token?: string; txType?: string }) => {\n    const { amount, token: tokenAddress, txType } = values ?? {}\n    const tokenValidation = composeValidators(required)(tokenAddress)\n\n    const isSpendingLimitTx = tokenSpendingLimit && isSpendingLimit(txType)\n    const tokenDecimals =\n      (tokenAddress && Number(getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.decimals)) ||\n      nativeCurrency.decimals\n    const amountValidation = composeValidators(\n      required,\n      mustBeFloat,\n      minMaxDecimalsLength(1, tokenDecimals),\n      minValue(0, false),\n      tokenAddress\n        ? maxValue(\n            isSpendingLimitTx\n              ? spendingLimitAllowedBalance({ tokenAddress, tokenSpendingLimit, tokens })\n              : getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.balance ?? 0,\n          )\n        : () => undefined,\n    )(amount)\n\n    return {\n      amount: amountValidation,\n      token: tokenValidation,\n    }\n  }\n\n  return (\n    <>\n      <ModalHeader onClose={onClose} subTitle={getStepTitle(1, 2)} title=\"Send funds\" />\n      <Hairline />\n      <GnoForm\n        formMutators={formMutators}\n        initialValues={{\n          amount: initialValues?.amount || amount,\n          recipientAddress: initialValues.recipientAddress || recipientAddress,\n          token: initialValues?.token || selectedToken,\n        }}\n        onSubmit={handleSubmit}\n        validation={sendFundsValidation}\n      >\n        {(...args) => {\n          const formState = args[2]\n          const mutators = args[3]\n          const { token: tokenAddress, txType } = formState.values\n          const selectedToken = tokens?.find((token) => token.address === tokenAddress)\n          const userSpendingLimits = spendingLimits?.filter(({ delegate }) => sameAddress(delegate, currentUser))\n\n          tokenSpendingLimit = getSpendingLimitByTokenAddress({\n            spendingLimits: userSpendingLimits,\n            tokenAddress: selectedToken?.address,\n          })\n\n          const handleScan = (value, closeQrModal) => {\n            let scannedAddress = value\n\n            if (scannedAddress.startsWith('ethereum:')) {\n              scannedAddress = scannedAddress.replace('ethereum:', '')\n            }\n            const scannedName = addressBook.find(({ address }) => {\n              return sameAddress(scannedAddress, address)\n            })?.name\n            const addressErrorMessage = mustBeEthereumAddress(scannedAddress)\n            if (!addressErrorMessage) {\n              mutators.setRecipient(scannedAddress)\n              setSelectedEntry({\n                name: scannedName || '',\n                address: scannedAddress,\n              })\n              setAddressErrorMsg('')\n            } else setAddressErrorMsg(addressErrorMessage)\n\n            closeQrModal()\n          }\n\n          let shouldDisableSubmitButton = !isValidAddress\n          if (selectedEntry) {\n            shouldDisableSubmitButton = !selectedEntry.address\n          }\n\n          const setMaxAllowedAmount = () => {\n            const isSpendingLimitTx = tokenSpendingLimit && isSpendingLimit(txType)\n            let maxAmount = selectedToken?.balance.tokenBalance ?? 0\n\n            if (isSpendingLimitTx) {\n              const spendingLimitBalance = fromTokenUnit(\n                new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\n                selectedToken?.decimals ?? 0,\n              )\n\n              maxAmount = new BigNumber(maxAmount).gt(spendingLimitBalance) ? spendingLimitBalance : maxAmount\n            }\n\n            mutators.setMax(maxAmount)\n          }\n\n          return (\n            <>\n              <Block className={classes.formContainer}>\n                <SafeInfo text=\"Sending from\" />\n                <Divider withArrow />\n                {selectedEntry && selectedEntry.address ? (\n                  <div\n                    onKeyDown={(e) => {\n                      if (sameString(e.key, 'Tab')) {\n                        return\n                      }\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    onClick={() => {\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    role=\"listbox\"\n                    tabIndex={0}\n                  >\n                    <Row margin=\"sm\">\n                      <Paragraph color=\"disabled\" noMargin size=\"lg\">\n                        Recipient\n                      </Paragraph>\n                    </Row>\n                    <Row align=\"center\" margin=\"md\">\n                      <PrefixedEthHashInfo\n                        hash={selectedEntry.address}\n                        name={selectedEntry.name}\n                        strongName\n                        showAvatar\n                        showCopyBtn\n                        explorerUrl={getExplorerInfo(selectedEntry.address)}\n                      />\n                    </Row>\n                  </div>\n                ) : (\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <AddressBookInput\n                        fieldMutator={mutators.setRecipient}\n                        pristine={pristine}\n                        errorMsg={addressErrorMsg}\n                        setIsValidAddress={setIsValidAddress}\n                        setSelectedEntry={setSelectedEntry}\n                      />\n                    </Col>\n                    <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                      <ScanQRWrapper handleScan={handleScan} />\n                    </Col>\n                  </Row>\n                )}\n                <Row margin=\"md\">\n                  <Col>\n                    <TokenSelectField\n                      initialValue={selectedToken?.address}\n                      isValid={!!selectedToken?.address}\n                      tokens={tokens}\n                    />\n                  </Col>\n                </Row>\n                {tokenSpendingLimit && selectedToken && (\n                  <SpendingLimitRow selectedToken={selectedToken} tokenSpendingLimit={tokenSpendingLimit} />\n                )}\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\">\n                      Amount\n                    </Paragraph>\n                    <ButtonLink onClick={setMaxAllowedAmount} weight=\"bold\" testId=\"send-max-btn\">\n                      Send max\n                    </ButtonLink>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <Field\n                      component={TextField}\n                      inputAdornment={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <InputAdornmentChildSymbol symbol={selectedToken?.symbol} />\n                          </InputAdornment>\n                        ),\n                      }}\n                      name=\"amount\"\n                      placeholder=\"Amount*\"\n                      type=\"text\"\n                      testId=\"amount-input\"\n                    />\n                  </Col>\n                </Row>\n              </Block>\n              <Modal.Footer>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose }}\n                  confirmButtonProps={{\n                    disabled: !formState.valid || shouldDisableSubmitButton,\n                    testId: 'review-tx-btn',\n                    text: 'Review',\n                  }}\n                />\n              </Modal.Footer>\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendFunds\n","export const getStepTitle = (currentStep: number, totalSteps: number): string => `Step ${currentStep} of ${totalSteps}`\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n  testId?: string\n}\n\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId={testId || 'qr-icon'}\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\nconst StyledIcon = styled(Icon)`\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 0 20px;\n  background: white;\n\n  & svg {\n    margin: 0;\n  }\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <StyledIcon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\ntype SafeInfoProps = {\n  text?: string\n}\n\nconst SafeInfo = ({ text }: SafeInfoProps): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      {text && (\n        <Row margin=\"sm\">\n          <Paragraph color=\"black400\" noMargin size=\"lg\">\n            {text}\n          </Paragraph>\n        </Row>\n      )}\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        strongName\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select, { SelectProps } from '@material-ui/core/Select'\nimport { FieldMetaState } from 'react-final-form'\nimport { FormControlProps } from '@material-ui/core/FormControl/FormControl'\n\nconst style = {\n  minWidth: '100%',\n}\n\ntype Props = {\n  classes: SelectProps['classes']\n  label: SelectProps['label']\n  renderValue: SelectProps['renderValue']\n  disableError: boolean\n  formControlProps: FormControlProps\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: FieldMetaState<any>\n}\n\nconst SelectInput = ({\n  classes,\n  disableError,\n  formControlProps,\n  input: { name, onChange, value, ...restInput },\n  label,\n  meta,\n  renderValue,\n  ...rest\n}: Props): React.ReactElement => {\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\n  const inputProps = {\n    ...restInput,\n    name,\n  }\n\n  return (\n    <FormControl {...formControlProps} error={showError} style={style}>\n      <InputLabel htmlFor={name}>{label}</InputLabel>\n      <Select\n        classes={classes}\n        inputProps={inputProps}\n        onChange={onChange}\n        renderValue={renderValue}\n        value={value}\n        variant=\"outlined\"\n        {...rest}\n      />\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\n    </FormControl>\n  )\n}\n\nexport default SelectInput\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    input: {\n      padding: '16px !important',\n    },\n  }),\n)\n","import MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { trimSpaces } from 'src/utils/strings'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  label?: string\n  pristine?: boolean\n  recipientAddress?: string\n  errorMsg?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  label = 'Recipient',\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const networkId = useSelector(currentChainId)\n\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (fullAddress: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(fullAddress)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    // Automatically checksum valid addresses\n    const { address } = parsePrefixedAddress(fullAddress)\n    const checkedAddr = checksumAddress(address) || address\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: checkedAddr })\n    return filteredEntries.length === 1 ? filteredEntries[0] : checkedAddr\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name, chainId } = value as AddressBookEntry\n        updateAddressInfo({ address, name, chainId })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (\n          hasFeature(FEATURES.DOMAIN_LOOKUP) &&\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\n        ) {\n          let address = ''\n          try {\n            address = await getAddressFromDomain(normalizedValue)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry =\n            typeof validatedAddress === 'string'\n              ? {\n                  address,\n                  name: normalizedValue,\n                  chainId: networkId,\n                }\n              : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string'\n            ? {\n                address: validatedAddress,\n                name: '',\n                chainId: networkId,\n              }\n            : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      id=\"address-book-input\"\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus\n          error={!!validationText}\n          fullWidth\n          variant=\"outlined\"\n          label={validationText ? validationText : label}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n          inputProps={{ ...params.inputProps, 'data-testid': 'address-book-input' }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <PrefixedEthHashInfo hash={address} name={name} showAvatar />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    if (props.errorMsg) {\n      setValidationText(props.errorMsg)\n    }\n  }, [props.errorMsg])\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nimport { sm } from 'src/theme/variables'\n\nexport const useSelectedTokenStyles = makeStyles(\n  createStyles({\n    container: {\n      background: 'none !important',\n      padding: '0',\n      width: '100%',\n    },\n    tokenData: {\n      padding: 0,\n      margin: 0,\n      lineHeight: '14px',\n    },\n    tokenImage: {\n      display: 'block',\n      marginRight: sm,\n      height: 28,\n      width: 'auto',\n    },\n  }),\n)\n\nexport const useSelectStyles = makeStyles(\n  createStyles({\n    selectMenu: {\n      paddingRight: 0,\n    },\n  }),\n)\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { List } from 'immutable'\nimport { ReactElement } from 'react'\n\nimport Field from 'src/components/forms/Field'\nimport SelectField from 'src/components/forms/SelectField'\nimport { required } from 'src/components/forms/validator'\nimport Img from 'src/components/layout/Img'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { Token } from 'src/logic/tokens/store/model/token'\n\nimport { useSelectStyles, useSelectedTokenStyles } from './style'\n\ninterface SelectTokenProps {\n  tokenAddress: string\n  tokens: List<Token>\n}\n\nconst SelectedToken = ({ tokenAddress, tokens }: SelectTokenProps): ReactElement => {\n  const classes = useSelectedTokenStyles()\n  const token = tokens.find(({ address }) => address === tokenAddress)\n\n  return (\n    <MenuItem className={classes.container} disableRipple>\n      {token ? (\n        <>\n          <ListItemIcon>\n            <Img\n              className={classes.tokenImage}\n              alt={token.name}\n              onError={setImageToPlaceholder}\n              src={token.logoUri || ''}\n            />\n          </ListItemIcon>\n          <ListItemText\n            className={classes.tokenData}\n            primary={token.name}\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\n          />\n        </>\n      ) : (\n        <Text color=\"placeHolder\" size=\"xl\">\n          Select an asset*\n        </Text>\n      )}\n    </MenuItem>\n  )\n}\n\ninterface TokenSelectFieldProps {\n  initialValue?: string\n  isValid?: boolean\n  tokens: List<Token>\n}\n\nconst TokenSelectField = ({ initialValue, isValid = true, tokens }: TokenSelectFieldProps): ReactElement => {\n  const classes = useSelectStyles()\n  const tokenClasses = useSelectedTokenStyles()\n\n  return (\n    <Field\n      classes={{ selectMenu: classes.selectMenu }}\n      className={isValid ? 'isValid' : 'isInvalid'}\n      component={(props) => (\n        <SelectField\n          {...props}\n          inputProps={{\n            'data-testid': 'token-input',\n          }}\n        />\n      )}\n      displayEmpty\n      initialValue={initialValue}\n      name=\"token\"\n      renderValue={(tokenAddress) => <SelectedToken tokenAddress={tokenAddress} tokens={tokens} />}\n      validate={required}\n    >\n      {tokens.map((token) => (\n        <MenuItem key={token.address} value={token.address}>\n          <ListItemIcon>\n            <Img\n              className={tokenClasses.tokenImage}\n              alt={token.name}\n              onError={setImageToPlaceholder}\n              src={token.logoUri || ''}\n            />\n          </ListItemIcon>\n          <ListItemText\n            primary={token.name}\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\n            data-testid={`select-token-${token.name}`}\n          />\n        </MenuItem>\n      ))}\n    </Field>\n  )\n}\n\nexport default TokenSelectField\n"],"sourceRoot":""}